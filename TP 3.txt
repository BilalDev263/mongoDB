TP 3

Partie 2.1

db.livres.updateMany(
  {},
  { $set: { disponible: true } }
);

db.livres.find({
disponible : { $eq : true}
}
)

2.2

db.livres.find({
publishedDate : { $gt: "2000" }


})

2.3

db.livres.find({
authors : { $eq: "['Veronica Haddon']" }


})

2.4

db.livres.find({
note_moyenne : { $gt: 4 }


})

2.5

db.utilisateurs.find({
"adresse.ville" : { $eq: "Paris" }


})

2.6

db.livres.find({
genre : { $in: ["Philosophie"] }


})

2.7

db.livres.find({
note_moyenne : { $gt: 4 },
prix : { $lt: 15 }



})

2.8

db.utilisateurs.find({
"livres_empruntes.titre" : { $eq: "Le Comte de Monte-Cristo" }



})

3.1
db.livres.updateOne(
    { "_id": ObjectId("67c5c9c36b722150d91e5224") },
    { "$set": { "titre": "Les MisérablesLes Misérables" } }
);

3.2

db.livres.updateMany(
    {},
    { "$set": { "stock": 5 } }
);


3.3
db.livres.updateOne(
    { "_id": ObjectId("id") },
    { "$set": { "disponible": false } }
);


3.4

db.utilisateurs.updateOne(
    { "email": "jean.martin@example.com" },
    {
        "$push": {
            "livres_empruntes": {
                "livre_id": ObjectId("97c5c9c36b722150d91e5228"),
                "titre": "Livre de la junglee",
                "date_emprunt": { "$date": "2024-03-03T00:00:00Z" },
                "date_retour_prevue": { "$date": "2024-04-03T00:00:00Z" }
            }
        }
    }
);

3.5
db.utilisateurs.updateOne(
    { "email": "jean.martin@example.com" },
    { 
        "$set": { 
            "adresse.rue": "Rue",
            "adresse.ville": "Lyon",
            "adresse.code_postal": "69100"
        }
    }
);


3.6

db.utilisateurs.updateOne(
    { "email": "jean.martin@example.com" },
    { "$addToSet": { "tags": "tag500" } }
);


3.7

db.livres.updateOne(
    { "_id": ObjectId("id") },
    { "$set": { "note_moyenne": 5 } }
);


4.1

db.utilisateurs.deleteOne(
    { "nom": "Durand" }
    
);

4.2

db.livres.deleteMany(
    { "auteur": "Nom de l'Auteur" }
);


4.3

db.utilisateurs.deleteOne(
    { "email": "utilisateur@example.com" }
);


5.1
db.livres.find(
).sort({ "note_moyenne": -1 });

5.2

db.livres.find(
).sort({ "date_publication": 1 }).limit(3);

5.3

db.livres.countDocuments({ 

auteur: { $eq: "Antoine de Saint-Exupéry" }
});

5.4

db.livres.find(
  {},
{
titre: 1, auteur: 1 ,note_moyenne : 1 , _id: 0
}
);

5.5

db.utilisateurs.find({
    "livres_empruntes.1": { "$exists": true },
    "livres_empruntes.0": { "$exists": true }
});

5.6

db.livres.find(
{ "titre": { "$regex": "Petit" } 
});


5.7

db.livres.find({
    "prix": { "$gte": 10, "$lte": 20 }
});


6.1

1.

db.createCollection("emprunts");

2.

db.emprunts.insertMany([
  {
    utilisateur_id: ObjectId("657a2f7e4b5c3d1f8a3e4b29"),
    livre_id: ObjectId("657b3f8e4c6d3e2f9b4d5c30"),
    date_emprunt: new Date("2023-02-20"),
    date_retour_prevue: new Date("2023-03-20"),
    date_retour_effective: null,
    statut: "en cours"
  },
  {
    utilisateur_id: ObjectId("657a2f7e4b5c3d1f8a3e4b31"),
    livre_id: ObjectId("657b3f8e4c6d3e2f9b4d5c32"),
    date_emprunt: new Date("2023-04-10"),
    date_retour_prevue: new Date("2023-05-10"),
    date_retour_effective: new Date("2023-05-08"),
    statut: "retourné"
  },
  {
    utilisateur_id: ObjectId("657a2f7e4b5c3d1f8a3e4b33"),
    livre_id: ObjectId("657b3f8e4c6d3e2f9b4d5c34"),
    date_emprunt: new Date("2023-06-15"),
    date_retour_prevue: new Date("2023-07-15"),
    date_retour_effective: null,
    statut: "en cours"
  }
]);


6.2

1.

point fort
Lecture rapide
Gestion des utilisateurs et emprunts simple
Scalabilité 

point negatif
Taille du document utilisateur peut devenir trop grande si de nombreux emprunts sont stockés
Problèmes de mise à jour si l'on doit modifier plusieurs emprunts en une seule requête
Nécessite des jointures (`$lookup`) pour récupérer les emprunts liés à un utilisateur ou à un livre

2.

Pour une application réelle l'approche référencée est préférable car facilite la gestion des emprunts.

3.

ajouter un champ `numeros_id` dans `livres` pour gérer les copies d’un livre
créer une collection `numeros` où chaque copie a un `livre_id` et un statut